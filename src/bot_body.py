import disnake
from disnake.ext import tasks, commands
import json
from random import randint

intents = disnake.Intents.default()
intents.message_content = True

global slash_inter, button_inter

slash_inter: disnake.AppCmdInter
button_inter = disnake.MessageInteraction

activity = disnake.Activity(
    name="Made by dixxe",
    type=disnake.ActivityType.listening)

bot = commands.Bot(command_prefix='>', intents=intents, help_command=None, activity=activity)

global roles, service, channels
roles = {} # {user.name : role.id }
service = [True, 1, 20, 'üç™'] # [0] - True/False role buying, [1] - how much credits for one reaction(emoji), [2] role cost, [3] - emoji
channels = {} # {channel.id : 0} for me its just simple to use channel id to get it
users = {} # {user.name : amount_of_credits}


##--—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ--##
def exportData(users, service, roles, channels):
    data = {'users': users,
            'service'    : service    }
    with open('value.json', 'w') as save:
        json.dump(data, save)
##--—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ--##

##--–∑–∞–≥—Ä—É–∑–∫–∞--##
def importData():
    with open('value.json', 'r') as save:
        data = json.load(save)
        users = data['users']
        service = data['service']
    return users, service
##--–∑–∞–≥—Ä—É–∑–∫–∞--##

##--–æ—á–∏—Å—Ç–∫–∞--##
def flushs():
    data = {'users': {},
            'service': [True, 1, 20, 'üç™']}
    with open('value.json', 'w') as save:
        json.dump(data, save)

##############################
@bot.event
async def on_ready():
    print(f"We have logged in {bot.user}")

@bot.event
async def on_reaction_add(reaction, user):
    msg = reaction.message
    if(str(reaction) == str(service[3])):
        users[msg.author.name] += 1

@bot.event
async def on_reaction_remove(reaction, user):
    msg = reaction.message
    if(str(reaction) == str(service[3])):
        users[msg.author.name] -= 1
###################################33

@bot.slash_command(description='–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞')
async def help(slash_inter):
    await slash_inter.response.defer()
    emb = disnake.Embed(title='–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:', color=16752640)
    emb.add_field(name='/set [–∫–∞–Ω–∞–ª]', value='–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞–Ω–∞–ª –≥–¥–µ –±—É–¥—É—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –∫—Ä–µ–¥–∏—Ç—ã.')
    emb.add_field(name='/emoji', value='–ü—Ä–∏–≤—è–∑–∞—Ç—å —ç–º–æ–¥–∑–∏ –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –≤—ã–¥–∞–≤–∞—Ç—å—Å—è –∫—Ä–µ–¥–∏—Ç—ã.')
    emb.add_field(name='/unset [–∫–∞–Ω–∞–ª]', value='–û—Ç–≤—è–∑–∞—Ç—å –∫–∞–Ω–∞–ª –≥–¥–µ –±—É–¥—É—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –∫—Ä–µ–¥–∏—Ç—ã.')
    emb.add_field(name='/role [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Ü–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ HEX]', value='–ö—É–ø–∏—Ç—å —Ä–æ–ª—å –∑–∞ –≤–∞—à–∏ –∫—Ä–µ–¥–∏—Ç—ã.')
    emb.add_field(name='/credits', value='–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å–∫—É –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –Ω–∞–±—Ä–∞–Ω–Ω—ã–º –∫—Ä–µ–¥–∏—Ç–∞–º.')
    emb.add_field(name='/delete_role [—Ä–æ–ª—å]', value='–£–¥–∞–ª–∏—Ç—å –ø–æ–∫—É–ø–Ω—É—é —Ä–æ–ª—å. –ö—Ä–µ–¥–∏—Ç—ã –Ω–µ –≤–æ–∑–º–µ—â–∞—é—Ç—Å—è.')
    emb.add_field(name='/variables', value='–ü–æ–º–µ–Ω—è—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥ –≤–∞—à —Å–µ—Ä–≤–µ—Ä.')
    emb.set_author(name='–ë—É—Å—Ç–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è', url='https://boosty.to/dixxe')
    await slash_inter.edit_original_response(embed=emb)

@bot.slash_command(description='–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞–Ω–∞–ª –≥–¥–µ –±—É–¥—É—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –∫—Ä–µ–¥–∏—Ç—ã.')
async def set(slash_inter, channel : disnake.abc.GuildChannel):
    await slash_inter.response.defer(ephemeral=True)
    if channel.id in channels.keys():
        await slash_inter.edit_original_response('–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω')
    else:
        channels[channel.id] = 0
        await slash_inter.edit_original_response('–ö–∞–Ω–∞–ª –ø—Ä–∏–≤—è–∑–∞–Ω')

@bot.slash_command(description='–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å–∫—É –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –Ω–∞–±—Ä–∞–Ω–Ω—ã–º –∫—Ä–µ–¥–∏—Ç–∞–º.')
async def credits(slash_inter):
    await slash_inter.response.defer()
    try:
        guild = slash_inter.author.guild
        pair = []
        emb = disnake.Embed(title='–¢–æ–ø –ª—é–¥–µ–π –ø–æ –∫—Ä–µ–¥–º—Ç–∞–º:', color=randint(1, 16777216))
        emb.set_author(name='–ë—É—Å—Ç–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è', url='https://boosty.to/dixxe')
        for user in users.keys():
            credits = users[user]        
            pair.append((user, credits))
        sorted_pair = sorted(pair, key=lambda x: x[1], reverse=True)
        for i, (user, credits) in enumerate(sorted_pair[:10]):
            try:emb.add_field(name=f"{i+1} –º–µ—Å—Ç–æ. {user}", value=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: {credits}, –µ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–æ–ª—å {guild.get_role(roles[user]).mention}.", inline=True)
            except Exception:emb.add_field(name=f"{i+1} –º–µ—Å—Ç–æ. {user}", value=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: {credits}.", inline=True)
        await slash_inter.edit_original_response(embed=emb)
    except Exception as e: await slash_inter.edit_original_response(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –æ—à–∏–±–∫–∏ –º–Ω–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º:\n```{e}```")

@bot.slash_command(description='–ü—Ä–∏–≤—è–∑–∞—Ç—å —ç–º–æ–¥–∑–∏ –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –≤—ã–¥–∞–≤–∞—Ç—å—Å—è –∫—Ä–µ–¥–∏—Ç—ã.')
async def emoji(slash_inter, emoji):
    await slash_inter.response.defer()
    try:
        print(emoji)
        try: service[3] = emoji.id
        except Exception: pass
        service[3] = emoji
        await slash_inter.edit_original_response(f'–≠–º–æ–¥–∑–∏ {emoji} –ø—Ä–∏–≤—è–∑–∞–Ω.')
    except Exception as e: await slash_inter.edit_original_response(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –æ—à–∏–±–∫–∏ –º–Ω–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º:\n```{e}```")

@bot.slash_command(description='–û—Ç–≤—è–∑–∞—Ç—å –∫–∞–Ω–∞–ª –≥–¥–µ –±—É–¥—É—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –∫—Ä–µ–¥–∏—Ç—ã.')
async def unset(slash_inter, channel : disnake.TextChannel or disnake.ForumChannel):
    await slash_inter.response.defer(ephemeral=True)
    if channel.id in channels.keys():
        channels.pop(channel.id)
        await slash_inter.edit_original_response('–ö–∞–Ω–∞–ª –æ—Ç–≤—è–∑–∞–Ω.')
    else:
         await slash_inter.edit_original_response('–ö–∞–Ω–∞–ª –Ω–µ –±—ã–ª –ø—Ä–∏–≤—è–∑–∞–Ω.')

@bot.slash_command(description='–ö—É–ø–∏—Ç—å —Ä–æ–ª—å –∑–∞ –≤–∞—à–∏ –∫—Ä–µ–¥–∏—Ç—ã.')
async def role(slash_inter, name : str or int, color : str):
    if(service[0]):
        await slash_inter.response.defer()
        guild = slash_inter.author.guild
        int_color = int(color, 16)
        if ((slash_inter.author.name in users.keys()) and ( slash_inter.author.name not in roles.keys())):
            credits = int(users[slash_inter.author.name])
            if (credits >= service[2]):
                users[slash_inter.author.name] -= service[2]
                role = await guild.create_role(name=name, color=int_color, reason=f'–ü–æ–∫—É–ø–Ω–∞—è —Ä–æ–ª—å {slash_inter.author.name}')
                roles[slash_inter.author.name] = role.id
                await slash_inter.author.add_roles(disnake.abc.Object(role.id))
                print(roles)
                print(users)
                await slash_inter.edit_original_response('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–∫—É–ø–∫–æ–π –≤–∞—à–µ–π –Ω–æ–≤–æ–π —Ä–æ–ª–∏!')
            else:
                await slash_inter.edit_original_response(f'–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤! –£ –≤–∞—Å {users[slash_inter.author.name]} –∫—Ä–µ–¥–∏—Ç–æ–≤, –∞ —Ä–æ–ª—å —Å—Ç–æ–∏—Ç {service[2]}')
        else:
            await slash_inter.edit_original_response(f'–£ –≤–∞—Å –Ω–µ—Ç—É –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ä–æ–ª—å.')
    else:
        await slash_inter.response.defer(ephemeral=True)
        await slash_inter.edit_original_response(f'–ü–æ–∫—É–ø–∫–∞ —Ä–æ–ª–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞ :(')

@bot.slash_command(description='–£–¥–∞–ª–∏—Ç—å –ø–æ–∫—É–ø–Ω—É—é —Ä–æ–ª—å. –ö—Ä–µ–¥–∏—Ç—ã –Ω–µ –≤–æ–∑–º–µ—â–∞—é—Ç—Å—è.')
async def delete_role(slash_inter, role : disnake.Role):
    await slash_inter.response.defer()
    if (role.id not in roles.values()):
        await slash_inter.edit_original_response('–î–∞–Ω–Ω–∞—è —Ä–æ–ª—å –Ω–µ –ø–æ–∫—É–ø–Ω–∞—è.')
    else:
        holder_name = list(roles.keys())[list(roles.values()).index(role.id)]
        await role.delete(reason='–ü–æ–∫—É–ø–Ω–∞—è —Ä–æ–ª—å —É–¥–∞–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π')
        roles.pop(holder_name)
        await slash_inter.edit_original_response(f'–†–æ–ª—å —É–¥–∞–ª–µ–Ω–∞, {holder_name} —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ä–∞—Å—Å—Ç—Ä–æ–∏—Ç—Å—è.')

@bot.slash_command(description='–ü–æ–º–µ–Ω—è—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥ –≤–∞—à —Å–µ—Ä–≤–µ—Ä.')
async def variables(slash_inter, role_buying : bool, credit_course : int, role_cost : int):
    await slash_inter.response.defer(ephemeral=True)
    service[0] = role_buying
    service[1] = credit_course
    service[2] = role_cost
    await slash_inter.edit_original_response(f'–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ü–æ–∫—É–ø–∫–∞ —Ä–æ–ª–∏: {service[0]}, –ö—É—Ä—Å: {service[1]} –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ —Ä–µ–∞–∫—Ü–∏—é, —Ü–µ–Ω–∞ —Ä–æ–ª–∏: {service[2]} –∫—Ä–µ–¥–∏—Ç–æ–≤')

########################################################################3
'''@tasks.loop(seconds=5)
async def parse_channels():
    for channel_id in channels:
        channel = bot.get_channel(channel_id)
        async for msg in channel.history(limit=200):
            for reaction in range(len(msg.reactions)):
                if(str(msg.reactions[reaction]) == str(service[3])):
                    users[msg.author.name] = (msg.reactions[reaction].count + service[1])'''



with open('token.txt', 'r') as file:
    token = file.read() 
bot.run(token)